{"ast":null,"code":"// Este archivo registra el service worker para hacer tu app una PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] es la dirección IPv6 de localhost.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 son todas las direcciones de loopback IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    if (isLocalhost) {\n      // Esto es localhost. Verifica si el SW existe y es válido.\n      checkValidServiceWorker(swUrl, config);\n      navigator.serviceWorker.ready.then(() => {\n        console.log('Esta app está siendo servida en caché por un Service Worker.');\n      });\n    } else {\n      // No es localhost. Solo registra normalmente.\n      registerValidSW(swUrl, config);\n    }\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('Nuevas actualizaciones están disponibles.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Contenido cacheado para uso offline.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error al registrar el Service Worker:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('Sin conexión a internet. App funcionando en modo offline.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","swUrl","process","env","PUBLIC_URL","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["C:/Users/ffmirama/OneDrive - Cencosud/Documentos/PWA/trivia-pwa/client/src/serviceWorkerRegistration.js"],"sourcesContent":["// Este archivo registra el service worker para hacer tu app una PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] es la dirección IPv6 de localhost.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 son todas las direcciones de loopback IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if ('serviceWorker' in navigator) {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n      if (isLocalhost) {\n        // Esto es localhost. Verifica si el SW existe y es válido.\n        checkValidServiceWorker(swUrl, config);\n  \n        navigator.serviceWorker.ready.then(() => {\n          console.log('Esta app está siendo servida en caché por un Service Worker.');\n        });\n      } else {\n        // No es localhost. Solo registra normalmente.\n        registerValidSW(swUrl, config);\n      }\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log('Nuevas actualizaciones están disponibles.');\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                console.log('Contenido cacheado para uso offline.');\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error al registrar el Service Worker:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('Sin conexión a internet. App funcionando en modo offline.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}